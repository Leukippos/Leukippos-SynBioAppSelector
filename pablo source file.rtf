{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs26 \cf0 var page = document.getElementById("page"), // get div element covering whole page, for mouse and touch events\
stage = document.getElementById("stage"), // get canvas element and context\
ctx = stage.getContext("2d");\
\
//insert assets here\
var dnaSkin = new Image();\
dnaSkin.fuente = "Assets/images/DNA.png";\
var rnaSkin = new Image();\
rnaSkin.fuente = "Assets/images/RNA.png";\
var dnaToRnaSkin = new Image();\
dnaToRnaSkin.fuente = "Assets/images/DNAtoRNA.png";\
var protSkin = new Image();\
protSkin.fuente = "Assets/images/Prot.png";\
var rnaToProtSkin = new Image();\
rnaToProtSkin.fuente = "Assets/images/RNAtoProt.png";\
var infoSkin = new Image();\
infoSkin.fuente = "Assets/images/Info.png";\
var intDesignSkin = new Image();\
intDesignSkin.fuente = "Assets/images/IntDesign.png";\
iconMissingSkin = new Image();\
iconMissingSkin.fuente = "Assets/images/IconMissing.png";\
\
var images = [dnaSkin, dnaToRnaSkin, rnaSkin, rnaToProtSkin, protSkin, infoSkin, intDesignSkin, iconMissingSkin], //and here\
\
gLoop, // for game loop\
origin = new Object(), // stores center stage coordinates\
\
r = 200; // radius of sphere display\
distance = 500, // stores distance of viewer, defines z:scale ratio\
prevDistance = 500,\
offsetZ = 250, // stores z start value, i.e. where z=0 is in relation to distance\
\
mouseX = 0, // stores mouse coordinates\
mouseY = 0,\
\
prevX = 0, // stores coord of mouseDown event\
prevY = 0,\
grab = false, // true if mouseDown\
changed = false, // true if canvas needs redrawing\
\
dogma = [],\
intDesign = [],\
blackBox = [],\
displayList = []; // stores visible icons, sorted according to c value for drawing order\
\
function getDistance(x1, y1, x2, y2) \{ // find distance between two points\
	var dist = Math.round(Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2)));\
	return dist;\
\}\
\
function getMousePos(evt) \{ // http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\
	var rect = stage.getBoundingClientRect();\
	return \{\
		x: evt.clientX - rect.left,\
		y: evt.clientY - rect.top\
	\};\
\}\
\
function Icon(ID, Img, menu, X, Y, Z, scale) \{ // Class constructor for icons\
	this.ID = ID; // way of identifying which icon has been clicked\
	this.skin = Img; // stores image file of icon\
	this.x = 0; // stores 2d coordinates of icon\
	this.y = 0;\
	this.scale = scale; // stores icon scale, 1 being the largest (and closest to the viewer)\
	this.Width = function () \{ return this.skin.width*this.scale;\} // returns width of icon skin (regardless of z value, relative to scale)\
	this.Height = function() \{ return this.skin.height*this.scale;\}  // returns height of icon skin (regardless of z value, relative to scale) \
	\
	this.X = X; // stores start coordinates of icon\
	this.Y = Y;\
	this.Z = Z;\
	this.hitRadius = 50; // sets hit test area\
	this.hitTest = function (x, y) \{ if (getDistance(this.x, this.y, x, y) < this.hitRadius) \{ return true;\} else \{ return false;\}\} // tests against stage coordinates\
	\
	menu.push(this); // add to display list\
\}\
\
var dna = new Icon("dna", dnaSkin, dogma, 0, -r, 0, 1), // icon construction\
transcription = new Icon("transc", dnaToRnaSkin, dogma, Math.cos(Math.PI/-6)*r/2, Math.sin(Math.PI/-6)*r/2, 0, 1),\
rna = new Icon("rna", rnaSkin, dogma, Math.cos(Math.PI/6)*r, Math.sin(Math.PI/6)*r, 0, 1),\
translation = new Icon("transl", rnaToProtSkin, dogma, 0, Math.sin(5*Math.PI/6)*r, 0, 1),\
protein = new Icon("prot", protSkin, dogma, Math.cos(5*Math.PI/6)*r, Math.sin(5*Math.PI/6)*r, 0, 1),\
info = new Icon("info", infoSkin, dogma, Math.cos(-5*Math.PI/6)*r/2, Math.sin(-5*Math.PI/6)*r/2, 0, 1),\
intDesignIcon = new Icon("intDes", intDesignSkin, dogma, 0, 0, 0, 1),\
\
language = new Icon("lanStan", iconMissingSkin, intDesign, 0, -r, 0, 0.5),\
sim = new Icon("cellSim", iconMissingSkin, intDesign, 0, 0, r, 0.5),\
intWork = new Icon("intWork", iconMissingSkin, intDesign, 0, r, 0, 0.5),\
circOpt = new Icon("circOpt", iconMissingSkin, intDesign, 0, 0, -r, 0.5),\
circDesign = new Icon("circDesign", iconMissingSkin, intDesign, -r, 0, 0, 0.5),\
modeling = new Icon("modeling", iconMissingSkin, intDesign, r, 0, 0, 0.5),\
\
education = new Icon("education", iconMissingSkin, blackBox, 0, -r, 0, 0.5),\
hardware = new Icon("hardware", iconMissingSkin, blackBox, 0, 0, r, 0.5),\
labTools = new Icon("labTools", iconMissingSkin, blackBox, 0, r, 0, 0.5),\
visualAnalysis = new Icon("visualAnalysis", iconMissingSkin, blackBox, 0, 0, -r, 0.5),\
drugDisc = new Icon("drugDisc", iconMissingSkin, blackBox, -r, 0, 0, 0.5),\
infoRep = new Icon("infoRep", iconMissingSkin, blackBox, r, 0, 0, 0.5);\
\
function render(obj) \{ // function repositions obj on screen according to its X, Y, Z\
	function projectX(x) \{\
		return (distance*x/(obj.Z + r + offsetZ)) + origin.X; // returns screen x value from 3d x and z values. Analogous to local3DToGobal2D\
	\}\
	function projectY(y) \{ // returns screen y value from 3d y and z values. Analogous to local3DToGoba2D\
		return (distance*y/(obj.Z + r + offsetZ)) + origin.Y;\
	\}\
	obj.x = projectX(obj.X); // 2d position needed for hittesting\
	obj.y = projectY(obj.Y);\
	ctx.drawImage(obj.skin, projectX(obj.X - obj.Width()/2), projectY(obj.Y - obj.Height()/2), projectX(obj.Width()) - origin.X, projectY(obj.Height()) - origin.Y); // draw icon based on its properties\
\}\
\
function rotate(obj, a1, a2) \{\
	// X axis rotation:\
	var z = obj.Z;\
	obj.Z = (z * Math.cos(a1) - obj.Y * Math.sin(a1)); // update Z value of obj when rotated around X axis, using matrix conversion\
	obj.Y = (z * Math.sin(a1) + obj.Y * Math.cos(a1)); // update Y value of obj when rotated around X axis, using matrix conversion\
	// Y axis rotation:\
	z = obj.Z;\
	obj.Z = (z * Math.cos(a2) - obj.X * Math.sin(a2)); // update Z value of obj when rotated around Y axis, using matrix conversion\
	obj.X = (z * Math.sin(a2) + obj.X * Math.cos(a2)); // update X value of obj when rotated around Y axis, using matrix conversion\
\}\
\
//MAIN LOOP\
\
function mainLoop() \{\
	if (grab) \{ // if mouse is down (user is dragging sphere)\
		changed = true;\
		\
		var dx = mouseX - prevX; // get drag length   INPUT --> dx, dy\
		var dy = mouseY - prevY;\
		\
		prevX = mouseX; // set prevX to current mouse X\
		prevY = mouseY; // set prevY to current mouse Y\
		\
		var rotX = (dy*Math.PI/(-2*r)); // set rotX according to drag vector relative to last frame\
		var rotY = (dx*Math.PI/(-2*r)); // set rotY according to drag vector relative to last frame\
		for (var i = 0; i < displayList.length; i++) \{ // loops through displayList mapping icons  dx, dy --> A, B\
			rotate(displayList[i], rotX, rotY);\
		\}\
	\}\
	if (changed) \{\
		stage.width = stage.width; // reset canvas\
		displayList.sort(function(a, b) \{return b.Z - a.Z;\}); // sort displayList according to Z, in descending order (Farthest to closest)\
		for (var i = 0; i < displayList.length; i++) \{ // loops through displayList drawing icons  A, B --> X, Y, size\
			render(displayList[i]);\
		\}\
		changed = false;\
	\}\
	gLoop = setTimeout(mainLoop, 1000/100); // loop the main loop\
\}\
\
function toBlackBox() \{\
	alert("Black Box Menu");\
	displayList = blackBox;\
	distance = 500;\
\}\
\
function toIntDesign() \{\
	alert("Integrated Design Menu");\
	displayList = intDesign;\
	distance = 500;\
\}\
\
function toDogma() \{\
	alert("Central Dogma Menu");\
	displayList = dogma;\
	distance = 500;\
\}\
\
//INPUT EVENT HANDLERS\
\
function touchUp(e) \{ // set grab false when mouseUp\
	grab = false;\
\}\
\
function touchDown(e) \{ // start drag\
	prevX = e.touches[0].pageX;\
	prevY = e.touches[0].pageY;\
	mouseX = e.touches[0].pageX;\
	mouseY = e.touches[0].pageY;\
	grab = true;\
\}\
\
function touchMov(e) \{\
	mouseX = e.touches[0].pageX;\
	mouseY = e.touches[0].pageY;\
	e.preventDefault();\
\}\
\
function pinchStartHandler(e) \{ // zoom in and out\
	prevDistance = distance;\
\}\
\
function pinchHandler(e) \{ // zoom in and out\
	distance = prevDistance * e.scale;\
	if (distance < 150) \{\
		zoomIn();\
	\}\
	if (distance > 1650) \{\
		zoomOut();\
	\}\
\}\
\
function upHandler(e) \{ // set grab false when mouseUp\
	grab = false;\
\}\
\
function downHandler(e) \{ // start drag\
	prevX = e.pageX;\
	prevY = e.pageY;\
	grab = true;\
\}\
\
function mouseMov(e) \{ // store mouse coord\
	mouseX = e.pageX;\
	mouseY = e.pageY;\
\}\
\
function scrollHandler(event) \{ // zoom in and out http://viralpatel.net/blogs/javascript-mouse-scroll-event-down-example/\
	event.preventDefault();\
	var delta = 0;\
\
	if (!event) event = window.event;\
\
	// normalize the delta\
	if (event.wheelDelta) \{\
\
		// IE and Opera\
		delta = event.wheelDelta / 120;\
\
	\} else if (event.detail) \{\
\
		// W3C\
		delta = -event.detail;\
	\}\
\
	distance = distance - 10*delta;\
	changed = true;\
	\
	if (distance < 200) \{\
		zoomIn();\
	\}\
	if (distance > 1100) \{\
		zoomOut();\
	\}\
\}\
\
function zoomIn() \{\
	if (displayList == dogma) \{\
			toBlackBox();\
		\}\
		else if (displayList == blackBox) \{\
			toIntDesign();\
		\}\
		else if (displayList == intDesign) \{\
			toDogma();\
		\}\
\}\
\
function zoomOut() \{\
	if (displayList == intDesign) \{\
			toBlackBox();\
		\}\
		else if (displayList == dogma) \{\
			toIntDesign();\
		\}\
		else if (displayList == blackBox) \{\
			toDogma();\
		\}\
\}\
\
function clickHandler(e) \{ // store mouse coord\
	var rect = stage.getBoundingClientRect();\
	clickX = e.clientX - rect.left;\
	clickY = e.clientY - rect.top;\
	for (var i = displayList.length-1; i > -1; i--) \{\
		if (displayList[i].hitTest(clickX, clickY))\
		\{\
			//alert(displayList[i].ID);\
			\
			//TODO: SELECT CATEGORY\
			switch (displayList[i].ID) \{\
				case "dna":\
					alert("DNA selected");\
					break;\
				case "transc":\
					alert("DNA-RNA Interaction selected");\
					break;\
				case "rna":\
					alert("RNA selected");\
					break;\
				case "transl":\
					alert("RNA-Protein selected");\
					break;\
				case "prot":\
					alert("Protein selected");\
					break;\
				case "info":\
					alert("Info selected");\
					break;\
				case "lanStan":\
					alert("Language Standards selected");\
					break;\
				case "cellSim":\
					alert("Cell Simulators Interaction selected");\
					break;\
				case "intWork":\
					alert("Integrated Workflows selected");\
					break;\
				case "circOpt":\
					alert("Circuit Optimization selected");\
					break;\
				case "circDesign":\
					alert("Genetic Circuit Design selected");\
					break;\
				case "modeling":\
					alert("Modeling selected");\
					break;\
				case "education":\
					alert("Education selected");\
					break;\
				case "hardware":\
					alert("Hardware selected");\
					break;\
				case "labTools":\
					alert("Lab Tools selected");\
					break;\
				case "visualAnalysis":\
					alert("Visual Analysis selected");\
					break;\
				case "drugDisc":\
					alert("Validating Drug Discovery selected");\
					break;\
				case "infoRep":\
					alert("Information Repositories selected");\
					break;\
			\}\
			break;\
		\}\
	\}\
\}\
\
//START CODE\
\
function start() \{ // initiator\
	//stage.removeEventListener("click", start, false); // remove init listener\
	\
	stage.width = window.innerWidth*0.9;\
	stage.height = window.innerHeight*0.9;\
	\
	origin.X = stage.width/2;\
	origin.Y = stage.height/2;\
	\
	if (isMobile.any()) \{ // if on mobile, add touch and gesture listeners\
		console.log("mobile");\
		stage.addEventListener("touchstart", touchDown, false);\
		page.addEventListener("touchend", touchUp, false);\
		page.addEventListener("touchmove", touchMov, false);\
		page.addEventListener("gesturestart", pinchStartHandler, false);\
		page.addEventListener("gesturechange", pinchHandler, false);\
	\}\
	else \{ // else add mouse listeners\
		console.log("desktop");\
		stage.addEventListener("mousedown", downHandler, false);\
		page.addEventListener("mouseup", upHandler, false);\
		page.addEventListener("mousemove", mouseMov, false);\
		\
		// http://www.javascriptkit.com/javatutors/onmousewheel.shtml\
		var mousewheelevt=(/Firefox/i.test(navigator.userAgent))? "DOMMouseScroll" : "mousewheel" //FF doesn't recognize mousewheel as of FF3.x\
		 \
		if (stage.attachEvent) \{ //if IE (and Opera depending on user setting)\
			stage.attachEvent("on"+mousewheelevt, scrollHandler);\
		\}\
		else if (stage.addEventListener) \{ //WC3 browsers\
		    stage.addEventListener(mousewheelevt, scrollHandler, false);\
		\}\
	\}\
	stage.addEventListener("click", clickHandler, false); // click handler\
	\
	displayList = dogma;\
	\
	displayList.sort(function(a, b) \{return b.Z - a.Z; \}); // sort displayList according to Z, in descending order\
	for (var i = 0; i < displayList.length; i++) \{ // loops through displayList drawing icons \
		render(displayList[i]);\
	\}\
	\
	mainLoop(); // start main loop\
\}\
\
var isMobile = \{ // returns true if mobile platform. Snippet from http://www.abeautifulsite.net/blog/2011/11/detecting-mobile-devices-with-javascript/\
    Android: function() \{\
        return navigator.userAgent.match(/Android/i);\
    \},\
    BlackBerry: function() \{\
        return navigator.userAgent.match(/BlackBerry/i);\
    \},\
    iOS: function() \{\
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);\
    \},\
    Opera: function() \{\
        return navigator.userAgent.match(/Opera Mini/i);\
    \},\
    Windows: function() \{\
        return navigator.userAgent.match(/IEMobile/i);\
    \},\
    any: function() \{\
        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\
    \}\
\};\
\
function init() \{\
	// entry point\
	start();//stage.addEventListener("click", start, false); // listen for start signal\
\}\
\
/*******PRELOADER*******/\
function preload(assets) \{\
	var numLoaded = 0;\
	var total = assets.length;\
	for (var i = 0; i < total; i++) \{\
		assets[i].onload = function() \{\
			numLoaded ++;\
			if (numLoaded == total) \{\
				init();\
			\}\
		\}\
		assets[i].src = assets[i].fuente;\
		console.log(numLoaded + " / " + total);\
	\}\
\}\
\
preload(images);}